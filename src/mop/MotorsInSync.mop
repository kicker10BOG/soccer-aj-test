package mop;

import java.io.*;
import java.util.*;
import notmop.SoccerMotorMotion;

MotorsInSync(SoccerMotorMotion motors) {
	float prevLeftMotorPos = 0;
	float prevRightMotorPos = 0;
	
/*	event testEvent after() :
			call(float[] SoccerMotorMotion.goForward(int)) 
			{
				System.out.println("testing");
			}
*/	
	// Get the staring positions of the motors
	event checkMotorsBefore before(SoccerMotorMotion motors) : 
		call(* SoccerMotorMotion.go*(*))
			&& target(motors) 
			{
				System.out.println("go* starting!");
				this.prevLeftMotorPos = motors.getLeftMotorPos();
				this.prevRightMotorPos = motors.getRightMotorPos();
			}
			
	// compare positions after moving
	event motorsInSync after(SoccerMotorMotion motors) : 
			call(* SoccerMotorMotion.go*(*))
			&& target(motors) 
			&& condition(Math.abs(
						Math.abs(motors.getLeftMotorPos() - this.prevLeftMotorPos) 
						- Math.abs(motors.getRightMotorPos() - this.prevRightMotorPos)) 
						< motors.getSyncThresh()) 
			{
				System.out.println("go* ending!");
				System.out.println("diff in left: " + Math.abs(motors.getLeftMotorPos() - this.prevLeftMotorPos));
				System.out.println("diff in right: " + Math.abs(motors.getRightMotorPos() - this.prevRightMotorPos));
			}
	
	event stopInSync after(SoccerMotorMotion motors) : 
			call(* SoccerMotorMotion.stop())
			&& target(motors) 
			{
				System.out.println("stop Worked!");
			}
	
	//ltl: testEvent
	//ltl: [](checkMotorsBefore => <> motorsInSync)
	ltl: [](stopInSync => (*) checkMotorsBefore) 
	
	@violation {
		System.out.println("motors out of sync at line" + __LOC);
	}
}